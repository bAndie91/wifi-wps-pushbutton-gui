#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

import os
import sys
import setproctitle
import threading
import socket
import gtk
import wnck
import glib
import gobject
import re
import inotifyx
import time
from datetime import datetime
import traceback
SHARED_DIR = '/usr/share/wps-pushbutton-gui'
sys.path.append(SHARED_DIR)
from manuf import MacParser
gtk.threads_init()
SO_PASSCRED = 16
WPS_CONFIG_PUSHBUTTON = 0x0080
WPS_CONFIG_VIRT_PUSHBUTTON = 0x0280
WPS_CONFIG_PHY_PUSHBUTTON = 0x0480
WPS_REQ_ENROLLEE_INFO = 0
WPS_REQ_ENROLLEE = 1
WPS_REQ_REGISTRAR = 2
WPS_REQ_WLAN_MANAGER_REGISTRAR = 3


def set_btn_iconfile(btn, filepath):
	img = gtk.Image()
	img.set_from_file(filepath)
	btn.set_image(img)

def set_stock_button_label(btn, label):
	align = btn.get_children()[0]
	hbox = align.get_children()[0]
	x, lbl = hbox.get_children()
	lbl.set_label(label)

def listen_events():
	eventpipe, inotifier = open_events_file()
	# This file is expected to be appended to, like a log file.
	eventpipe.seek(0, 2)
	while True:
		line = eventpipe.readline()
		if line == '':
			# EOF reached. wait until file is touched.
			for event in inotifyx.get_events(inotifier):
				if event.mask & inotifyx.IN_MODIFY:
					break
				elif event.mask != 0:
					os.close(inotifier)
					eventpipe.close()
					eventpipe, inotifier = open_events_file()
					break
			continue
		line = line[:-1]
		try:
			(syslogprio_and_month, dayofmonth, thetime, syslogtag, iface, eventname, macaddress, uuid, devicecategory, config_methods, dev_password_id, request_type, dev_name) = line.split(None, 12)
		except ValueError:
			continue
		
		if eventname == 'WPS-ENROLLEE-SEEN':
			# TODO: consider syslog timezone
			month = syslogprio_and_month.split('>')[1]
			eventtime = int(datetime.strftime(datetime.strptime('%s %s %s %s' % (month, dayofmonth, thetime, time.gmtime().tm_year), '%b %d %H:%M:%S %Y'), '%s'))
			now = time.time()
			if eventtime + WPS_TIMEOUT_SEC > now:
				config_methods = int(config_methods, 16)
				if config_methods & WPS_CONFIG_PUSHBUTTON or config_methods & WPS_CONFIG_VIRT_PUSHBUTTON or config_methods & WPS_CONFIG_PHY_PUSHBUTTON:
					request_type = int(request_type)
					if request_type == WPS_REQ_ENROLLEE:
						if iface[-1] == ':': iface = iface[:-1]
						if dev_name[0] == '[' and dev_name[-1] == ']':
							dev_name = dev_name[1:-1]
							manufacturer = model = model_num = serial = None
						else:
							(manufacturer, model, model_num, serial, dev_name) = dev_name.split('|', 4)
						# TODO: signal strength -> distance
						
						data = {
							'iface': iface,
							'macaddress': macaddress,
							'devicecategory': devicecategory,
							'dev_name': dev_name,
							'manufacturer': manufacturer,
							'model': model,
							'model_num': model_num,
							'serial': serial,
							'uuid': uuid,
						}
						gtk.threads_enter()
						if uuid not in Windows:
							#WnckScreen.force_update()
							popup_window(data, eventtime)
						gtk.threads_leave()
		
		# TODO: maybe wait for WPS-SUCCESS/WPS-TIMEOUT event?

def open_events_file():
	retry_sec = 2
	while True:
		try:
			fd = open(events_file_path, 'r')
			break
		except IOError as error:
			# TODO: check error type (some errors are not expected to be recovered shortly)
			traceback.print_exc()
			# It's expected to be re-created in a relative short time.
			sys.stderr.write("Retry in %d sec...\n" % (retry_sec,))
			time.sleep(retry_sec)
	inot = inotifyx.init()
	# This file is expected to be appended to only, so don't need to watch clobber events.
	inotifyx.add_watch(inot, events_file_path, inotifyx.IN_MODIFY | inotifyx.IN_MOVE_SELF | inotifyx.IN_DELETE_SELF)
	# FIXME: symlink() does not generate inotify event
	return fd, inot

def display_comm_error(win):
	dlg = gtk.MessageDialog(win, gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_ERROR, gtk.BUTTONS_OK, "Error in communication")
	dlg.run()
	dlg.destroy()

def wps_approve(iface, win):
	wps_action('WPS_PBC', iface, win)

def wps_cancel(iface, win):
	wps_action('WPS_CANCEL', iface, win)

def wps_action(msg, iface, win):
	# TODO: config hostapd ctrl socket OR a command to control hostapd
	if not send_hostapd_msg(iface, msg):
		display_comm_error(win)
	else:
		# TODO: maybe wait for WPS-SUCCESS/WPS-TIMEOUT event?
		win.destroy()

def send_hostapd_msg(iface, msg):
	sock = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM, 0)
	sock.setsockopt(socket.SOL_SOCKET, SO_PASSCRED, 1)  # trigger autobind on Linux
	sock.connect('/var/run/hostapd/' + iface)
	sock.send(msg)
	response = sock.recv(3)
	sock.close()
	if response == 'OK\n':
		return True
	return False

def macvendorlookup(mac):
	return Macparser.get_manuf_long(mac) or Macparser.get_manuf(mac) or ''

def read_device_type_definitions():
	with open('wps-device-types.c', 'r') as f:
		do_read = False
		categs = []
		current_categ = -1
		# NOTE: we assume that 'eapwps_tlv_primary_device_type_category' if at the top of the file
		# and subcategories come after it in ascending order of category Id.
		while True:
			line = f.readline()
			if line == '': break
			if re.search(r'value_string eapwps_tlv_', line):
				do_read = True
				if len(categs) > 0:
					current_categ += 1
			if re.match(r'\};', line):
				do_read = False
			if do_read:
				m = re.search(r'0x([0-9a-f]+),\s*"(.+?)"', line, re.IGNORECASE)
				if m:
					num = int(m.group(1), 16)
					name = m.group(2)
					if current_categ >= 0:
						DeviceCategory[categs[current_categ]]['sub'][num] = name
					else:
						categs.append(num)
						DeviceCategory[num] = {'name': name, 'sub': {}}

def device_category_name(cat):
	return DeviceCategory.get(cat, {}).get('name')

def device_subcategory_name(cat, sub):
	return DeviceCategory.get(cat, {}).get('sub', {}).get(sub)

def get_devtype_icon(cat, sub):
	cat = cat or 'default'
	sub = sub or 'default'
	d = 'enrollee-device-category'
	e = '.png'
	p = os.path.join(d, cat, sub) + e
	if not os.path.exists(p):
		p = os.path.join(d, cat, 'default') + e
	if not os.path.exists(p):
		p = os.path.join(d, 'default', 'default') + e
	return p

def transfer_focus(win, wnckwin):
	win.disconnect(win.get_data('map-event-signal-id'))
	glib.idle_add(lambda: wnckwin.activate(gtk.gdk.x11_get_server_time(win.get_window())), priority=glib.PRIORITY_DEFAULT_IDLE)
	glib.idle_add(lambda: post_transfer_focus(win), priority=glib.PRIORITY_DEFAULT_IDLE)
	#gobject.timeout_add(0, post_transfer_focus, win)

def post_transfer_focus(win):
	win.set_keep_above(False)
	win.set_sensitive(True)
	return False

def drop_focus(win):
	# Attempt to drop default focus
	# 'set_focus_on_map' does not seem to work (under iceWM), hence the wnck workaround
	win.set_focus_on_map(False)
	win.set_accept_focus(False)
	win.set_can_focus(False)
	win.set_keep_above(True)
	#win.iconify()
	
	# Here comes the wnck-based workaround
	win.set_sensitive(False)
	active_found = False
	for wnckwin in WnckScreen.get_windows():
		if wnckwin.is_active():
			active_found = True
			sid = win.connect('map-event', lambda *x: transfer_focus(win, wnckwin))
			win.set_data('map-event-signal-id', sid)
			break
	if not active_found:
		post_transfer_focus(win)

def count_down(win, progressbar, eventtime, WPS_TIMEOUT_SEC):
	now = time.time()
	time_remaining = WPS_TIMEOUT_SEC - (now - eventtime)
	if time_remaining < 0:
		win.destroy()
		return False
	progressbar.set_fraction(time_remaining / WPS_TIMEOUT_SEC)
	minu = int(time_remaining / 60)
	secu = time_remaining % 60
	progressbar.set_text('%02d:%02d' % (minu, secu))
	return True

def popup_window(data, eventtime):
	win = gtk.Window()
	box_outermost = gtk.VBox(spacing = 12)
	frm1 = gtk.Frame()
	frm2 = gtk.Frame()
	box_info = gtk.HBox()
	box_icons = gtk.VBox()
	box_texts = gtk.VBox()
	ico1 = gtk.Image()
	ico2 = gtk.Image()
	label1 = gtk.Label()
	progressbar = gtk.ProgressBar()
	box_buttons = gtk.HBox()
	btn1 = gtk.Button(label="Approve")
	btn2 = gtk.Button(stock=gtk.STOCK_STOP)
	btn3 = gtk.Button(stock=gtk.STOCK_CLOSE)
	
	win.set_title("WPS Request")
	win.set_icon_from_file('wps-approve_16.png')
	win.set_data('uuid', data['uuid'])
	drop_focus(win)
	win.connect('destroy', lambda w, uuid: Windows.__delitem__(uuid), data['uuid'])
	btn1.connect('clicked', lambda *x: wps_approve(data['iface'], win))
	btn2.connect('clicked', lambda *x: wps_cancel(data['iface'], win))
	btn3.connect('clicked', lambda *x: win.destroy())
	
	frm1.set_shadow_type(gtk.SHADOW_ETCHED_IN)
	frm1.set_border_width(2)
	frm2.set_shadow_type(gtk.SHADOW_NONE)
	frm2.set_border_width(4)
	ico1.set_from_file('wifi-logo.png')
	(categ, _, subcateg) = data['devicecategory'].split('-')
	categ = int(categ)
	subcateg = int(subcateg)
	categ_name = device_category_name(categ)
	subcateg_name = device_subcategory_name(categ, subcateg)
	ico2.set_from_file(get_devtype_icon(categ_name, subcateg_name))
	ico1.set_padding(6, 4)
	ico2.set_padding(6, 4)
	set_btn_iconfile(btn1, 'wps-approve_32.png')
	set_stock_button_label(btn2, "Disallow")
	set_stock_button_label(btn3, "Ignore")
	box_buttons.set_focus_child(btn2)
	
	data['dev_name'] = data['dev_name'].strip()
	data['macvendor'] = macvendorlookup(data['macaddress'])
	if categ_name:
		data['categ_name'] = categ_name
		if subcateg_name:
			data['categ_name'] += " â—† " + subcateg_name
	else:
		data['categ_name'] = "unknown"
	variables = dict(map(lambda x: (x, glib.markup_escape_text(data[x] or '')), data))
	if not data['dev_name']:
		variables['dev_name'] = "(unknown)"
	if data['model_num'] == data['model']:
		variables['model_num'] = ''
	if not data['serial']:
		variables['serial'] = "n/a"
	variables.update({
		'dev_name_font_weight': 'bold' if data['dev_name'] else 'light',
		'dev_name_font_style': 'normal' if data['dev_name'] else 'italic',
	})
	label1.set_markup("""

<span color='darkgrey'>AP:</span> {iface}

<span color='darkgrey'>Enrollee Name:</span> <span font_weight='{dev_name_font_weight}' font_style='{dev_name_font_style}' font-size='larger'>{dev_name}</span>

<span color='darkgrey'>Type:</span> {categ_name}
<span color='darkgrey'>Model:</span> {manufacturer} â—† {model} {model_num}

<span color='darkgrey'>Serial:</span> <tt>{serial}</tt>
<span color='darkgrey'>MAC:</span> <b>{macvendor}</b> <tt>[{macaddress}]</tt>

	""".strip().format(**variables))
	#label1.set_selectable(True)
	gobject.timeout_add(1000, count_down, win, progressbar, eventtime, WPS_TIMEOUT_SEC)
	
	win.add(box_outermost)
	box_outermost.pack_start(frm1, True, True)
	frm1.add(frm2)
	frm2.add(box_info)
	box_info.pack_start(box_icons, True, False)
	box_info.pack_start(box_texts, True, True)
	box_icons.pack_start(ico1, False, False)
	box_icons.pack_start(ico2, False, False)
	box_texts.pack_start(label1, False, True)
	box_outermost.pack_start(progressbar, True, False)
	box_outermost.pack_start(box_buttons, False, False)
	box_buttons.pack_start(btn1, True, False)
	box_buttons.pack_start(btn2, True, False)
	box_buttons.pack_start(btn3, True, False)
	win.show_all()
	Windows[data['uuid']] = win


os.chdir(SHARED_DIR)
PROGNAME = 'wps-pushbutton-gui'
setproctitle.setproctitle(PROGNAME)
events_file_path = os.environ.get('HOSTAPD_CTRL_LOG', '/var/log/hostapd-wps.log')
WPS_TIMEOUT_SEC = 120
DeviceCategory = {}
read_device_type_definitions()
Macparser = MacParser('manuf/manuf.txt')
Windows = {}

WnckScreen = wnck.screen_get_default()
thr = threading.Thread(target=listen_events)
thr.start()

gtk.main()

thr.join()
